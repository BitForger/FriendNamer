import java.util.regex.Matcher
import java.util.regex.Pattern
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'


// for people who want stable
// plugins {
//     id "net.minecraftforge.gradle.forge" version "2.0.2"
// }

version = ""
group= "io.github.cyb3rwarri0r8.friendnamer" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "friendnamer"

def mcversion = "1.8"
def mod_version = version

minecraft {
    version = "1.8-11.14.4.1563"
    runDir = "run"

    replace '${version}', project.version
    replace '${mcversion}', project.minecraft.version

    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20141130"
    makeObfSourceJar = true // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

task incrementMajor << {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    println(":incrementMajor - Incrementing Major Version ...")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def dev = Integer.parseInt(matcherVersion.group(4))

        oldVersion = major + "." + minor + "." + patch + "." + dev
        newVersion = (major + 1) + ".0.0"
    }
    else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = (major + 1) + ".0.0"
    }

    println(":incrementMinor - Current Version: " + oldVersion)
    println(":incrementMinor - New Version:     " + newVersion)
    project.version = newVersion

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>false</isDev>")
    configFile.write(configIsDev)
}
task incrementMinor << {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    println(":incrementMinor - Incrementing Minor Version ...")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def dev = Integer.parseInt(matcherVersion.group(4))


        oldVersion = major + "." + minor + "." + patch + "." + dev
        newVersion = major + "." + (minor + 1) + ".0"
    }
    else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + (minor + 1) + ".0"
    }

    println(":incrementMinor - Current Version: " + oldVersion)
    println(":incrementMinor - New Version:     " + newVersion)
    project.version = newVersion

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>false</isDev>")
    configFile.write(configIsDev)
}
task incrementPatch << {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    println(":incrementPatch - Incrementing Patch Version ...")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def devVersion = Integer.parseInt(matcherVersion.group(4))

        oldVersion = major + "." + minor + "." + patch + "." + devVersion
        newVersion = major + "." + minor + "." + (patch + 1)
    }
    else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + minor + "." + (patch + 1)
    }

    println(":incrementPatch - Current Version: " + oldVersion)
    println(":incrementPatch - New Version:     " + newVersion)
    project.version = newVersion

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>false</isDev>")
    configFile.write(configIsDev)
}
task setDevVersion << {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        println(":setDevVersion - Incrementing Dev Version")

        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def dev = Integer.parseInt(matcherVersion.group(4))


        oldVersion = major + "." + minor + "." + patch + "." + dev
        newVersion = major + "." + minor + "." + patch + "." + (dev + 1)
    }
    else {
        println(":setDevVersion - Setting to Dev Version")

        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + minor + "." + patch + "." + "1"
    }

    println(":incrementPatch - Current Version: " + oldVersion)
    println(":incrementPatch - New Version:     " + newVersion)
    project.version = mcversion + "-" + newVersion

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>true</isDev>")
    configFile.write(configIsDev)
}

task getModData << {
    println(":getModData - Getting mod-related data from config")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternModid = Pattern.compile("<modid>(\\p{Print}+)</modid>")
    def patternMcVersion = Pattern.compile("<mcversion>(\\p{Print}+)</mcversion>")
    def patternGroup = Pattern.compile("<group>(\\p{Graph}+)</group>")

    def matcherModid = patternModid.matcher(configText)
    def matcherMcVersion = patternMcVersion.matcher(configText)
    def matcherGroup = patternGroup.matcher(configText)
    matcherModid.find()
    matcherMcVersion.find()
    matcherGroup.find()

    def configModid = matcherModid.group(1)
    def configMcVersion = matcherMcVersion.group(1)
    def configGroup = matcherGroup.group(1)

    println(":getModData - ModID:      " + configModid)
    println(":getModData - MC-Version: " + configMcVersion)
    println(":getModData - Group:      " + configGroup)

    project.archivesBaseName = configModid //+ "-" + configMcVersion
    println(project.archivesBaseName)
    project.group = configGroup
}
processResources
{
	Matcher matcherVersion
    def configFile = file("config.xml")
    def configText = configFile.getText()
    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))
    if(isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()
        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def dev = Integer.parseInt(matcherVersion.group(4))
        project.version = mcversion + "-" + major + "." + minor + "." + patch + "." + dev
    }
    else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()
        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        project.version = mcversion + "-" + major + "." + minor + "." + patch
    }


    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

build.mustRunAfter(getModData)
build.dependsOn(getModData)
